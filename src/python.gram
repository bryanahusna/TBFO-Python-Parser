# See: https://docs.python.org/3/reference/grammar.html

file: [statements] ENDMARKER

statements: statement+ 
statement: compound_stmt  | simple_stmts
simple_stmts: simple_stmt NEWLINE
simple_stmt:
    | assignment
    | star_expressions 
    | return_stmt
    | import_stmt
    | raise_stmt
    | 'pass'
    | 'break' 
    | 'continue'
compound_stmt:
    | function_def
    | if_stmt
    | class_def
    | with_stmt
    | for_stmt
    | while_stmt

assignment:
    | NAME ['=' star_expressions ] 
    | ('(' single_target ')' 
         | single_subscript_attribute_target) ['=' star_expressions ] 
    | (star_targets '=' )+ star_expressions !'='
    | single_target augassign star_expressions 
augassign:
    | '+=' 
    | '-=' 
    | '*=' 
    | '@=' 
    | '/=' 
    | '%=' 
    | '&=' 
    | '|=' 
    | '^=' 
    | '<<=' 
    | '>>=' 
    | '**=' 
    | '//='

import_stmt: 'import' dotted_name ['as' NAME ] (',' dotted_name ['as' NAME ])* | import_from
import_from:
    | 'from' ('.' | '...')* dotted_name 'import' import_from_targets 
    | 'from' ('.' | '...')+ 'import' import_from_targets 
import_from_targets:
    | '(' NAME ['as' NAME ] (',' NAME ['as' NAME ])* [','] ')' 
    | NAME ['as' NAME ] (',' NAME ['as' NAME ])* !','
    | '*' 
dotted_name:
    | dotted_name '.' NAME 
    | NAME

if_stmt:
    | 'if' named_expression ':' block elif_stmt 
    | 'if' named_expression ':' block [else_block] 
elif_stmt:
    | 'elif' named_expression ':' block elif_stmt 
    | 'elif' named_expression ':' block [else_block] 
else_block:
    | 'else' ':' block 

while_stmt:
    | 'while' named_expression ':' block [else_block] 

for_stmt:
    | 'for' star_targets 'in' ~ star_expressions ':' block [else_block]
with_stmt:
    | 'with' '(' with_item (',' with_item)* ','? ')' ':' block 
    | 'with' with_item (',' with_item)* ':' block
with_item:
    | disjunction 'as' star_target &(',' | ')' | ':') 
    | disjunction 

return_stmt:
    | 'return' [star_expressions] 

raise_stmt:
    | 'raise' disjunction ['from' disjunction ] 
    | 'raise' 

function_def: 'def' NAME '(' [params] ')' ':' block

params:
    | slash_no_default param_no_default* param_with_default* [star_etc] 
    | slash_with_default param_with_default* [star_etc] 
    | param_no_default+ param_with_default* [star_etc] 
    | param_with_default+ [star_etc] 
    | star_etc 

slash_no_default:
    | param_no_default+ '/' ',' 
    | param_no_default+ '/' &')' 
slash_with_default:
    | param_no_default* param_with_default+ '/' ',' 
    | param_no_default* param_with_default+ '/' &')' 

star_etc:
    | '*' param_no_default param_maybe_default* [kwds] 
    | '*' ',' param_maybe_default+ [kwds] 
    | kwds 
kwds: '**' param_no_default 

param_no_default:
    | NAME ',' 
    | NAME &')' 
param_with_default:
    | NAME default ',' 
    | NAME default &')' 
param_maybe_default:
    | NAME default? ',' 
    | NAME default? &')'
default: '=' disjunction


class_def: 'class' NAME ['(' [arguments] ')' ] ':' block 

block:
    | NEWLINE INDENT statements DEDENT 
    | simple_stmt
star_expressions:
    | star_expression (',' star_expression )+ [','] 
    | star_expression ',' 
    | star_expression
star_expression:
    | '*' bitwise_or 
    | disjunction

star_named_expressions: ','.star_named_expression+ [','] 
star_named_expression:
    | '*' bitwise_or 
    | named_expression

named_expression:
    | NAME ':=' ~ disjunction
    | disjunction !':='

expressions:
    | disjunction (',' disjunction )+ [','] 
    | disjunction ',' 
    | disjunction

disjunction:
    | conjunction ('or' conjunction )+ 
    | conjunction
conjunction:
    | inversion ('and' inversion )+ 
    | inversion
inversion:
    | 'not' inversion 
    | comparison
comparison:
    | bitwise_or compare_op_bitwise_or_pair+ 
    | bitwise_or
compare_op_bitwise_or_pair:
    | '==' bitwise_or
    | ('!=' ) bitwise_or
    | '<=' bitwise_or
    | '<' bitwise_or
    | '>=' bitwise_or
    | '>' bitwise_or
    | 'not' 'in' bitwise_or
    | 'in' bitwise_or
    | 'is' 'not' bitwise_or
    | 'is' bitwise_or

bitwise_or:
    | bitwise_or '|' bitwise_xor 
    | bitwise_xor
bitwise_xor:
    | bitwise_xor '^' bitwise_and 
    | bitwise_and
bitwise_and:
    | bitwise_and '&' shift_expr 
    | shift_expr
shift_expr:
    | shift_expr '<<' sum 
    | shift_expr '>>' sum 
    | sum

sum:
    | sum '+' term 
    | sum '-' term 
    | term
term:
    | term '*' factor 
    | term '/' factor 
    | term '//' factor 
    | term '%' factor 
    | term '@' factor 
    | factor
factor:
    | '+' factor 
    | '-' factor 
    | '~' factor 
    | power
power:
    | primary '**' factor 
    | primary
primary:
    | primary '.' NAME
    | primary '(' [arguments] ')' 
    | primary '[' slices ']' 
    | atom

slices:
    | slice !',' 
    | ','.slice+ [','] 
slice:
    | [disjunction] ':' [disjunction] [':' [disjunction] ] 
    | named_expression 
atom:
    | NAME
    | 'True' 
    | 'False' 
    | 'None' 
    | STRING+
    | NUMBER
    | (tuple | group)
    | (dict | set )
    | '...' 

list:
    | '[' [star_named_expressions] ']' 
tuple:
    | '(' [star_named_expression ',' [star_named_expressions]  ] ')' 
group:
    | '(' (yield_expr | named_expression) ')' 
set: '{' star_named_expressions '}'
dict:
    | '{' [double_starred_kvpairs] '}' 
    | '{' invalid_double_starred_kvpairs '}'
double_starred_kvpairs: double_starred_kvpair (',' double_starred_kvpair)* [','] 
double_starred_kvpair:
    | '**' bitwise_or 
    | disjunction ':' disjunction

arguments:
    | args [','] &')' 
args:
    | ','.('*' disjunction | ( NAME ':=' ~ disjunction | disjunction ) !'=')+ [',' kwargs ] 
    | kwargs 

kwargs:
    | kwarg_or_starred (',' kwarg_or_starred)* ',' ','.kwarg_or_double_starred+ 
    | kwarg_or_starred (',' kwarg_or_starred)*
    | kwarg_or_double_starred (',' kwarg_or_double_starred)*

kwarg_or_starred:
    | NAME '=' disjunction 
    | '*' disjunction 
kwarg_or_double_starred:
    | NAME '=' disjunction 
    | '**' disjunction 

star_targets:
    | star_target !',' 
    | star_target (',' star_target )* [','] 
star_targets_list_seq: star_target (',' star_target)* [','] 
star_targets_tuple_seq:
    | star_target (',' star_target )+ [','] 
    | star_target ',' 
star_target:
    | '*' (!'*' star_target) 
    | target_with_star_atom
target_with_star_atom:
    | t_primary '.' NAME !t_lookahead 
    | t_primary '[' slices ']' !t_lookahead 
    | star_atom
star_atom:
    | NAME 
    | '(' target_with_star_atom ')' 
    | '(' [star_targets_tuple_seq] ')' 
    | '[' [star_targets_list_seq] ']' 

single_target:
    | single_subscript_attribute_target
    | NAME 
    | '(' single_target ')' 
single_subscript_attribute_target:
    | t_primary '.' NAME !t_lookahead 
    | t_primary '[' slices ']' !t_lookahead 

t_primary:
    | t_primary '.' NAME &t_lookahead 
    | t_primary '[' slices ']' &t_lookahead
    | t_primary '(' [arguments] ')' &t_lookahead 
    | atom &t_lookahead 

t_lookahead: '(' | '[' | '.'